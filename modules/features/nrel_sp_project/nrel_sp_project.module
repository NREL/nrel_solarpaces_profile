<?php
use \Drupal\node\Entity\Node;
use \Drupal\file\Entity\File;
use \Drupal\field_collection\Entity\FieldCollectionItem;
use \Drupal\Core\Link;
use \Drupal\Core\Url;
use Drupal\paragraphs\Entity\Paragraph;

function nrel_sp_project_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id = "panels_block_page_content") {
    if (isset($form['blocks'])) {
      foreach ($form['blocks'] as $key => $block_data) {
        if (is_array($block_data) && isset($block_data['weight'])) {
          //SET FIELD WEIGHT RANGE TO 200 FOR CONTENT TYPE WITH TONS OF FIELDS
          $form['blocks'][$key]['weight']['#delta'] = 200;
        }
      }
    }
  }
}

function nrel_sp_project_theme($existing, $type, $theme, $path) {
  return [
    'projectmap' => [
      'variables' => [
        'countrydata' => NULL,
      ],
    ],
  ];
}

function nrel_sp_project_preprocess_views_view(&$variables) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
  if ($route->getPath() == '/by-country' && !$is_admin) {
    $customblock = \Drupal::service('plugin.manager.block')
      ->createInstance('project_map', []);
    $variables['attachment_before'] = $customblock->build();
  }
}


function nrel_sp_project_preprocess_field(&$variables, $hook) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if($node != NULL) {
    switch ($variables['field_name']) {
      case 'field_break_ground':
      case 'field_production_start_date':
        $date_field = TRUE;
        break;
      case 'field_tariff_rate':
        $concat_field = 'field_tariff_rate_unit';
        break;
      case 'field_cost':
        $currency_field = 'field_cost_currency';
        break;
      case 'field_land_area':
        $concat_field = 'field_land_area_units';
        break;
      case 'field_net_capacity':
      case 'field_gross_turbine_capacity':
        $concat_field = 'field_capacity_unit';
        break;
      case 'field_power_cycle_pressure':
        $concat_field = 'field_power_cycle_pressure_units';
        break;
      case 'field_storage_capacity':
        $concat_field = 'field_storage_capacity_unit';
        break;
      case 'field_solar_field_aperture_area':
        $concat_field = 'field_solar_field_aperture_area_';
        break;
      case 'field_dish_aperture_area':
        $concat_field = 'field_dish_aperture_area_units';
        break;
      case 'field_sca_area':
        $concat_field = 'field_sca_area_units';
        break;
      case 'field_sca_length':
        $concat_field = 'field_sca_length_units';
        break;
      case 'field_electricity_generation':
        $markup_field = 'field_electricity_generation_bas';
        break;
      case 'field_site_solar_resource':
        $variables['items'][0]['content']['#markup'] = str_replace('.0', '', $variables['items'][0]['content']['#markup']);
        break;
      case 'field_line_length':
        $concat_field = 'field_line_length_units';
        break;
      case 'field_mirror_width':
        $concat_field = 'field_mirror_width_units';
        break;
      case 'field_collector_manufacturer_1':
        $concat_field = 'field_collector_model_1';
        break;
      case 'field_collector_manufacturer_2':
        $concat_field = 'field_collector_model_2';
        break;
      case 'field_solar_field_outlet_tempera':
      case 'field_solar_field_inlet_temperat':
      case 'field_solar_field_temperature_di':
        $temp_field = 'field_solar_field_temperature_un';
        break;
      case 'field_receiver_length_1':
        $concat_field = 'field_receiver_length_units';
        break;
      case 'field_receiver_length_2':
        $concat_field = 'field_receiver_2_length_units';
        break;
      case 'field_heliostat_field_area':
        $concat_field = 'field_heliostat_field_area_units';
        break;
      case 'field_heliostat_area':
        $concat_field = 'field_heliostat_area_units';
        break;
      case 'field_tower_height':
        $concat_field = 'field_tower_height_units';
        break;
      case 'field_receiver_outlet_temperatur':
        $concat_field = 'field_outlet_temperature_units';
        break;
      case 'field_receiver_inlet_temperature':
        $concat_field = 'field_outlet_temperature_units';
        break;
      case 'field_receiver_temperature_diffe':
        $concat_field = 'field_outlet_temperature_units';
        break;
      case 'field_panel_height':
        $concat_field = 'field_panel_height_units';
        break;
      case 'field_receiver_diameter':
        $concat_field = 'field_receiver_diameter_units';
        break;
      case 'field_turbine_supplier':
        $concat_parenthesis_field = 'field_turbine_supplier_country';
        break;
      case 'field_heliostat_manufacturer':
        $custom_model = 'field_heliostat_model_1';
        break;
      case 'field_dish_manufacturer_1':
        $custom_model = 'field_dish_model_1';
        break;
      case 'field_sca_manufacturer_1':
        $custom_model = 'field_sca_model_1';
        break;
      case 'field_sca_manufacturer_2':
        $custom_model = 'field_sca_model_2';
        break;
      case 'field_sca_mirror_manufacturer_1':
        $custom_model = 'field_sca_mirror_model_1';
        break;
      case 'field_email_address':
        if(isset($variables['items'][0]['content']['#url'])) {
          $paragraph = $variables['element']['#object'];
          $contact_name = $paragraph->field_contact_name->value;
          if($contact_name != '') {
            $variables['items'][0]['content']['#title'] = $contact_name;
          }
        }
        break;
      case 'field_key_reference_url':
        if(isset($variables['items'][0]['content']['#url'])) {
          $paragraph = $variables['element']['#object'];
          $document_type = $paragraph->field_key_reference_type->value;
          if($document_type != '') {
            $variables['items'][0]['content']['#title'] = $document_type;
          }
        }
        break;
      case 'field_hce_length':
        if($variables['items'][0]['content']['#markup'] != '0') {
          $paragraph = $variables['element']['#object'];
          $units = $paragraph->field_hce_length_tube_units->value;
          $variables['items'][0]['content']['#markup'] .= $units;
        } else {
          $variables['label_hidden'] = true;
          unset($variables['items'][0]);
        }
        break;
      case 'field_number_of_hces':
        if($variables['items'][0]['content']['#markup'] == '0') {
          $variables['label_hidden'] = true;
          unset($variables['items'][0]);
        }
        break;
      case 'field_manufacturer':
        $paragraph = $variables['element']['#object'];
        $model = $paragraph->field_model->value;
        if($model) {
          $variables['label'] .= ' (Model)';
          $variables['items'][0]['content']['#context']['value'] .= " ({$model})";
        }
        break;
      case 'field_owners':
        $owners = $node->get('field_owners')->getValue();
        $pid = $owners[0]['target_id'];
        $paragraph = Paragraph::load($pid);
        $percent = $paragraph->field_owner_percent->value;
        if($percent != '') {
          $variables['label'] .= ' (%)';
        }
        break;
      case 'field_owner':
        $paragraph = $variables['element']['#object'];
        $percent = $paragraph->field_owner_percent->value;
        if($percent && $percent != 'NULL') {
          $variables['items'][0]['content']['#context']['value'] .= " ({$percent}%)";
        }
        break;
      case 'field_reference_doc':
        $pdf_suffix = true;
        break;
    }
    if (isset($date_field)) {
      $datetime = $variables['items'][0]['content']['#attributes']['datetime'];
      $datetimepieces = explode('T', $datetime);
      $datepieces = explode('-', $datetimepieces[0]);
      $datepieces_year = $datepieces[0];
      $datepieces_month = $datepieces[1];
      $datepieces_day = $datepieces[2];

      if ($datepieces_month == '01' && $datepieces_day == '01') {
        $variables['items'][0]['content']['#text'] = $datepieces_year;
      }
      else if ($datepieces_month != '01' && $datepieces_day == '01') {
        $variables['items'][0]['content']['#text'] = str_replace('1, ', '', $variables['items'][0]['content']['#text']);
      }
    }
    if (isset($pdf_suffix)) {
      if ($units = $node->get('field_reference_doc')->getValue()) {
        foreach ($units as $unitkey => $unit) {
          if (isset($unit['uri'])) {
            if (substr($unit['uri'], -3) == 'pdf') {
              $path_to_profile = drupal_get_path('profile', 'nrel_solarpaces_profile');
              $uri = $path_to_profile . '/themes/custom/nrel_solarpaces_theme/images/icon_pdf.gif';
              $image = array(
                '#theme' => 'image',
                '#uri' => $uri,
              );
              $renderer = \Drupal::service('renderer');
              $themed_image = render($image);
              $variables['items'][$unitkey]['content']['#suffix'] = ' ' . $themed_image;
            }
          }
        }
      }
    }
    if (isset($custom_model) && isset($variables['items'][0]['content']['#context']['value'])) {
      if ($units = $node->get($custom_model)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          $variables['label'] = $variables['label'] . ' (Model)';
          $variables['items'][0]['content']['#context']['value'] .= ' (' . $units[0]['value'] . ')';
        }
      }
    }
    if (isset($concat_field) && (isset($variables['items'][0]['content']['#context']['value']) || isset($variables['items'][0]['content']['#markup']))) {
      if ($units = $node->get($concat_field)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          if(isset($variables['items'][0]['content']['#context'])) {
            $variables['items'][0]['content']['#context']['value'] .= ' ' . $units[0]['value'];
          } elseif(isset($variables['items'][0]['content']['#markup'])) {
            $variables['items'][0]['content']['#markup'] .= ' ' . $units[0]['value'];
          }
        }
      }
    }
    if (isset($concat_parenthesis_field) && isset($variables['items'][0]['content']['#context']['value'])) {
      if ($units = $node->get($concat_parenthesis_field)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          $variables['items'][0]['content']['#context']['value'] .= ' (' . $units[0]['value'] . ')';
        }
      }
    }
    if (isset($currency_field) && isset($variables['items'][0]['content']['#context']['value'])) {
      if ($units = $node->get($currency_field)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          if(is_numeric($variables['items'][0]['content']['#context']['value'])) {
            $variables['items'][0]['content']['#context']['value'] = number_format($variables['items'][0]['content']['#context']['value']);
          }
          $variables['items'][0]['content']['#context']['value'] .= ' ' . $units[0]['value'];
        }
      }
    }
    if (isset($temp_field) && isset($variables['items'][0]['content']['#context']['value'])) {
      if ($units = $node->get($temp_field)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          if(is_numeric($variables['items'][0]['content']['#context']['value'])) {
            $variables['items'][0]['content']['#context']['value'] = number_format($variables['items'][0]['content']['#context']['value']);
          }
          $variables['items'][0]['content']['#context']['value'] .= 'º' . $units[0]['value'];
        }
      }
    }
    if(isset($markup_field) && isset($variables['items'][0]['content']['#markup'])) {
      if ($units = $node->get($markup_field)->getValue()) {
        if (isset($units[0]) && $units[0]['value'] != '') {
          if ($units[0]['value'] == 'Expected') {
            $variables['items'][0]['content']['#markup'] .= ' (' . $units[0]['value'] . ')';
          }
          else {
            $variables['items'][0]['content']['#markup'] .= ' ' . $units[0]['value'];
          }
        }
      }
    }
    if (isset($link_field) && isset($variables['items'][0]['content']['#context']['value'])) {
      if ($units = $node->get($link_field)->getValue()) {
        if (isset($units[0]) && $units[0]['uri'] != '') {
          $link = Link::fromTextAndUrl($variables['items'][0]['content']['#context']['value'], Url::fromUri($units[0]['uri'], array('attributes' => array('target' => '_blank'))));
          $variables['items'][0]['content']['#context']['value'] = $link;
        }
      }
    }
  }
}

function get_node_fields($nodetype, $label = 'key') {

  $entityManager = \Drupal::service('entity_field.manager');
  $fields = $entityManager->getFieldDefinitions('node', $nodetype);

  $content = [];

  $excluded_keys = [
    'panelizer',
  ];

  foreach ($fields as $key => $field) {
    $field_info = $field->getFieldStorageDefinition();

    if ($field_info->isBaseField() == FALSE && !in_array($key, $excluded_keys)) {
      switch ($label) {
        case 'key':
          $content[] = $key;
          break;
        case 'label':
          $content[] = $field->label();
          break;
        case 'type':
          $content[] = $field->getType();
          break;
      }
    }
  }

  return $content;
}

function import_nodes($all_rows) {

  drupal_set_time_limit(3600);

  $node_type = 'project';

  $path_to_profile = drupal_get_path('profile', 'nrel_solarpaces_profile');

  $keys = get_node_fields($node_type, 'key');
  $labels = get_node_fields($node_type, 'label');
  $mapped_fields = array_combine($keys, $labels);

  $types = get_node_fields($node_type, 'type');
  $mapped_types = array_combine($keys, $types);

  $count = 0;

  $country_manager = \Drupal::service('address.country_repository')->getList();

  foreach ($all_rows as $project_key => $project_row) {

    // Create node object with attached file.
    $node = Node::create([
      'type' => 'project',
      'title' => $project_row['projectname'],
    ]);

    if (!in_array($project_row['country'], array_keys($country_manager))) {
      //echo "NO COUNTRY - " . $project_row['projectname'];
      //continue;
    }

    foreach ($project_row as $field_key => $field_value) {

      //SKIP UNUSED FIELDS
      if (is_string($field_value) && trim($field_value) == '') {
        continue;
      }
      if ($field_value == 'NULL') {
        continue;
      }

      //GET MAPPED FIELD FROM NODE
      $node_field_machine_name = get_mapped_node_key($field_key);

      //SKIP UNMAPPED FIELDS
      if ($node_field_machine_name == '') {
        continue;
      }

      //ADDRESS
      if ($node_field_machine_name == 'field_address' && !isset($address_check[$project_key])) {

        $admin_area = '';

        $address_check[$project_key] = TRUE;

        //SOME COUNTRIES HAVE STATES
        if (isset($project_row['state']) && trim($project_row['state']) != '') {
          $admin_area = $project_row['state'];
        }

        //SOME COUNTRIES HAVE REGIONS
        if ($admin_area == '' && isset($project_row['region']) && trim($project_row['region']) != '') {
          $admin_area = $project_row['region'];
        }

        if ($admin_area == '') {
          echo "NO STATE/REGION - " . $project_row['projectname'];
          //continue;
        }

        $address = [
          'locality' => $project_row['city'],
          'country_code' => $project_row['country'],
          'administrative_area' => $admin_area,
          'langcode' => 'en',
        ];

        $node->set('field_address', $address);
      }

      //LATITUDE LONGITUDE
      if ($node_field_machine_name == 'field_lat_long_location' && !isset($latlong_check[$project_key])) {

        $latlong_check[$project_key] = TRUE;

        $latlong = FieldCollectionItem::create(['field_name' => 'field_lat_long_location']);

        $latlong->field_latitude_degrees->setValue($project_row['latitudedegrees']);
        $latlong->field_latit->setValue($project_row['latitudedirection']);
        $latlong->field_latitude_minutes->setValue($project_row['latitudeminutes']);
        $latlong->field_latitude_seconds->setValue($project_row['latitudeseconds']);

        $latlong->field_longitude_degrees->setValue($project_row['longitudedegrees']);
        $latlong->field_longitude_direction->setValue($project_row['longitudedirection']);
        $latlong->field_longitude_minutes->setValue($project_row['longitudeminutes']);
        $latlong->field_longitude_seconds->setValue($project_row['longitudeseconds']);

        //WE SAVE AFTER SAVING $node
      }

      //HCEs
      if ($node_field_machine_name == 'field_hces' && !isset($hces_check[$project_key])) {
        $hces_check[$project_key] = TRUE;

        $hces_array = [];
        if(is_array($project_row['hcemanufacturer'])) {
          foreach ($project_row['hcemanufacturer'] as $hcemanufacturer_key => $hcemanufacturer_value) {
            $paragraph = [];
            $paragraph['type'] = 'hce';
            $paragraph['field_manufacturer'] = $project_row['hcemanufacturer'][$hcemanufacturer_key];
            $paragraph['field_model'] = $project_row['hcemodel'][$hcemanufacturer_key];
            $paragraph['field_number_of_hces'] = $project_row['numberhces'][$hcemanufacturer_key];
            $paragraph['field_hce_type'] = $project_row['hcetype'][$hcemanufacturer_key];
            $paragraph['field_hce_length'] = $project_row['hcelength'][$hcemanufacturer_key];
            $paragraph['field_hce_length_tube_units'] = $project_row['hcelengthtubeunits'][$hcemanufacturer_key];
            $hcemanufacturers = Paragraph::create($paragraph);
            $hcemanufacturers->save();
            $hces_array[] = $hcemanufacturers;
          }
        } else {
          $paragraph = [];
          $paragraph['type'] = 'hce';
          $paragraph['field_manufacturer'] = $project_row['hcemanufacturer'];
          $paragraph['field_model'] = $project_row['hcemodel'];
          $paragraph['field_number_of_hces'] = $project_row['numberhces'];
          $paragraph['field_hce_type'] = $project_row['hcetype'];
          $paragraph['field_hce_length'] = $project_row['hcelength'];
          $paragraph['field_hce_length_tube_units'] = $project_row['hcelengthtubeunits'];
          $hcemanufacturers = Paragraph::create($paragraph);
          $hcemanufacturers->save();
          $hces_array[] = $hcemanufacturers;
        }
      }

      //OWNERS
      if ($node_field_machine_name == 'field_owners' && !isset($owners_check[$project_key])) {

        $owners_check[$project_key] = TRUE;

        $owners_array = [];
        if(is_array($project_row['owner'])) {
          foreach ($project_row['owner'] as $owner_key => $owner_value) {
            if($owners = FieldCollectionItem::create(['field_name' => 'field_owners'])) {

              $owners->field_owner->setValue($project_row['owner'][$owner_key]);
              if ($project_row['ownerpercent'] != 'NULL' && is_numeric($project_row['ownerpercent'])) {
                $owners->field_owner_percent->setValue($project_row['ownerpercent'][$owner_key]);
              }
              $owners_array[] = $owners;
            }
          }
        } else {
          if($owners = FieldCollectionItem::create(['field_name' => 'field_owners'])) {

            $owners->field_owner->setValue($project_row['owner']);
            if ($project_row['ownerpercent'] != 'NULL' && is_numeric($project_row['ownerpercent'])) {
              $owners->field_owner_percent->setValue($project_row['ownerpercent']);
            }
            $owners_array[] = $owners;
          }
        }

        //WE SAVE AFTER SAVING $node
      }

      //CONTACT MAIL LINK(s)
      if ($node_field_machine_name == 'field_contact' && !isset($contact_link_check[$project_key])) {

        $contact_link_check[$project_key] = TRUE;

        $contact_link = [];

        $contact_link[] = [
          'uri' => 'mailto:' . $project_row['contact1email'],
          'title' => $project_row['contact1'],
        ];

        if (trim($project_row['contact2']) != '') {
          $contact_link[] = [
            'uri' => 'mailto:' . $project_row['contact2email'],
            'title' => $project_row['contact2'],
          ];
        }
        $node->set($node_field_machine_name, $contact_link);
      }

      //DEVELOPERS
      if ($node_field_machine_name == 'field_developer_s_' && !isset($developers_check[$project_key])) {

        $developers_check[$project_key] = TRUE;

        $developers = [];

        $developers[] = $project_row['developer1'];

        if (trim($project_row['developer2']) != '') {
          $developers[] = $project_row['developer2'];
        }
        $node->set($node_field_machine_name, $developers);
      }

      //OPERATORS
      if ($node_field_machine_name == 'field_operator' && !isset($operators_check[$project_key])) {

        $operators_check[$project_key] = TRUE;

        $operators = [];

        $operators[] = $project_row['operator1'];

        if (trim($project_row['operator2']) != '') {
          $operators[] = $project_row['operator2'];
        }
        $node->set($node_field_machine_name, $operators);
      }

      //EPC CONTRACTOR
      if ($node_field_machine_name == 'field_epc_contractor' && !isset($epccontractor_check[$project_key])) {

        $epccontractor_check[$project_key] = TRUE;

        $epccontractor = $project_row['epccontractor'];

        if (trim($project_row['epccontractortask']) != '') {
          $epccontractor .= ' : ' . $project_row['epccontractortask'];
        }
        $node->set($node_field_machine_name, $epccontractor);
      }

      //PHOTO
      if ($node_field_machine_name == 'field_photo' && !isset($photodata_check[$project_key]) && $project_row['photo'] != 'NULL') {

        $photodata_check[$project_key] = TRUE;

        // Create file object from a locally copied file.
        $photo_to_copy = $path_to_profile . '/files/nrelphotos/' . $project_row['photo'];
        $uri = file_unmanaged_copy($photo_to_copy, 'public://photos/' . $project_row['photo'], FILE_EXISTS_REPLACE);
        $file = File::Create([
          'uri' => $uri,
        ]);
        $file->save();

        $photodata = [
          'target_id' => $file->id(),
          'alt' => $project_row['alttext'],
        ];
        $node->set($node_field_machine_name, $photodata);

      }

      //field_reference_doc
      if ($node_field_machine_name == 'field_reference_doc' && !isset($referencedoc_check[$project_key]) && $project_row['photo'] != '' && $project_row['photo'] != 'NULL') {

        $referencedoc_check[$project_key] = TRUE;

        // Create file object from a locally copied file.
        $photo_to_copy = $path_to_profile . '/files/nrelphotos/' . $project_row['photo'];
        $uri = file_unmanaged_copy($photo_to_copy, 'public://photos/' . $project_row['photo'], FILE_EXISTS_REPLACE);
        $file = File::Create([
          'uri' => $uri,
        ]);
        $file->save();

        $photodata = [
          'target_id' => $file->id(),
          'alt' => $project_row['alttext'],
        ];
        $node->set($node_field_machine_name, $photodata);

      }

      //TERMS
      if ($node_field_machine_name == 'field_status' && isset($project_row['status']) && $project_row['status'] != '') {

        $term_name = $project_row['status'];
        $term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties(['name' => $term_name]);
        $tid = array_keys($term);

        if (isset($tid[0])) {
          $node->set($node_field_machine_name, ['target_id' => $tid[0]]);
        }

      }

      if ($node_field_machine_name == 'field_technology' && isset($project_row['technology']) && $project_row['technology'] != '') {

        $term_name = $project_row['technology'];
        $term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties(['name' => $term_name]);
        $tid = array_keys($term);

        if (isset($tid[0])) {
          $node->set($node_field_machine_name, ['target_id' => $tid[0]]);
        }

      }

      //DATES
      if ($node_field_machine_name == 'field_break_ground' && isset($project_row['breakgroundyear']) && !isset($breakground_check[$project_key])) {

        $breakground_check[$project_key] = TRUE;

        $month = (trim($project_row['breakgroundmonth']) != '' && trim($project_row['breakgroundmonth']) != 'NULL' ? trim($project_row['breakgroundmonth']) : '');
        $day = (trim($project_row['breakgroundday']) != '' && trim($project_row['breakgroundday']) != 'NULL' ? trim($project_row['breakgroundday']) : '');
        $year = (trim($project_row['breakgroundyear']) != '' && trim($project_row['breakgroundyear']) != 'NULL' ? trim($project_row['breakgroundyear']) : '');

        $date_string = trim($month . ' ' . $day . ' ' . $year);
        if($date_string != '') {
          $node->set($node_field_machine_name, date('Y-m-d', strtotime($date_string)));
        }
      }

      if ($node_field_machine_name == 'field_status_date' && isset($project_row['statusdate']) && !isset($statusdate[$project_key])) {

        $statusdate[$project_key] = TRUE;

        $date_string = $project_row['statusdate'];

        $node->set($node_field_machine_name, date('Y-m-d', strtotime($date_string)));

      }

      if ($node_field_machine_name == 'field_production_start_date' && isset($project_row['productionstartyear']) && !isset($productionstart_check[$project_key])) {

        $productionstart_check[$project_key] = TRUE;

        $month = (trim($project_row['productionstartmonth']) != '' && trim($project_row['productionstartmonth']) != 'NULL' ? trim($project_row['productionstartmonth']) : '');
        $day = (trim($project_row['productionstartday']) != '' && trim($project_row['productionstartday']) != 'NULL' ? trim($project_row['productionstartday']) : '');
        $year = (trim($project_row['productionstartyear']) != '' && trim($project_row['productionstartyear']) != 'NULL' ? trim($project_row['productionstartyear']) : '');

        $date_string = trim($month . ' ' . $day . ' ' . $year);
        if($date_string != '') {
          $node->set($node_field_machine_name, date('Y-m-d', strtotime($date_string)));
        }

      }

      if ($node_field_machine_name == 'field_ppa_tariff_date' && isset($project_row['ppadateyear']) && !isset($productionstart_check[$project_key])) {

        $productionstart_check[$project_key] = TRUE;

        $month = (trim($project_row['ppadatemonth']) != '' && trim($project_row['ppadatemonth']) != 'NULL' ? trim($project_row['ppadatemonth']) : '');
        $day = (trim($project_row['ppadateday']) != '' && trim($project_row['ppadateday']) != 'NULL' ? trim($project_row['ppadateday']) : '');
        $year = (trim($project_row['ppadateyear']) != '' && trim($project_row['ppadateyear']) != 'NULL' ? trim($project_row['ppadateyear']) : '');

        $date_string = trim($month . ' ' . $day . ' ' . $year);
        if($date_string != '') {
          $node->set($node_field_machine_name, date('Y-m-d', strtotime($date_string)));
        }

      }

      $special_handling = [
        'title',
        'field_address',
        'field_lat_long_location',
        'field_contact',
        'field_developer_s_',
        'field_operator',
        'field_epc_contractor',
        'field_photo',
        'field_reference_doc',
        'field_number_of_hces_1',
        'field_hce_manufacturer_model_1',
        'field_hce_type_length_1',
        'field_reference_doc',
        'field_owners',
        'field_generation_offtaker_s_',
        'zzz', //credit, draftid, deleted, county
        'field_hces',
      ];

      $date_fields = [
        'field_break_ground',
        'field_status_date',
        'field_production_start_date',
        'field_ppa_tariff_date',
      ];

      $terms = [
        'field_status',
        'field_technology',
      ];

      $non_standard_fields = array_merge($special_handling, $date_fields);
      $non_standard_fields = array_merge($non_standard_fields, $terms);

      //ALL BASIC STRING OR INTEGER FIELDS
      if (!in_array($node_field_machine_name, $non_standard_fields)) {
        $node->set($node_field_machine_name, $field_value);
      }
    }

    //echo 'created ' . $project_row['projectname'] . '<br />';
    $node->save();
    //NEED TO SAVE FIELD COLLECTIONs AFTER SAVING PARENT ENTITY
    if (isset($latlong_check[$project_key])) {
      $latlong->setHostEntity($node);
      $latlong->save();
    }
    if (isset($owners_check[$project_key]) && count($owners_array)) {
      foreach($owners_array as $owners) {
        $owners->setHostEntity($node);
        $owners->save();
      }
    }
    if (isset($hces_check[$project_key]) && count($hces_array)) {
      $current = [];
      foreach($hces_array as $hce) {
        // Grab any existing paragraphs from the node, and add this one
        $current[] = [
          'target_id' => $hce->id(),
          'target_revision_id' => $hce->getRevisionId(),
        ];
      }
      $node->set('field_hces', $current);
      $node->save();
    }

    $count++;
    if($count > 20) {
      //exit();
    }
  }

}

function get_mapped_node_key($fieldname) {

  $node_field_machine_name = '';

  switch ($fieldname) {
    case 'projectid':
      $node_field_machine_name = 'field_project_id';
      break;
    case 'owner':
      $node_field_machine_name = 'field_owners';
      break;
    case 'projectname':
      $node_field_machine_name = 'title';
      break;
    case 'shortname':
      $node_field_machine_name = 'field_short_name';
      break;
    case 'country':
      $node_field_machine_name = 'field_address';
      break;
    case 'state':
      $node_field_machine_name = 'field_address';
      break;
    case 'region':
      $node_field_machine_name = 'field_address';
      break;
    case 'city':
      $node_field_machine_name = 'field_address';
      break;
    case 'county':
      $node_field_machine_name = 'field_address';
      break;
    case 'latitudedegrees':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'latitudeminutes':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'latitudeseconds':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'latitudedirection':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'longitudedegrees':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'longitudeminutes':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'longitudeseconds':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'longitudedirection':
      $node_field_machine_name = 'field_lat_long_location';
      break;
    case 'technology':
      $node_field_machine_name = 'field_technology';
      break;
    case 'status':
      $node_field_machine_name = 'field_status';
      break;
    case 'statusdate':
      $node_field_machine_name = 'field_status_date';
      break;
    case 'ppadatemonth':
      $node_field_machine_name = 'field_ppa_tariff_date';
      break;
    case 'ppadateday':
      $node_field_machine_name = 'field_ppa_tariff_date';
      break;
    case 'ppadateyear':
      $node_field_machine_name = 'field_ppa_tariff_date';
      break;
    case 'feedintarifftype':
      $node_field_machine_name = 'field_feed_in_tariff';
      break;
    case 'tariffrate':
      $node_field_machine_name = 'field_tariff_rate';
      break;
    case 'tariffrateunit':
      $node_field_machine_name = 'field_tariff_rate_unit';
      break;
    case 'tariffyears':
      $node_field_machine_name = 'field_tariff_period';
      break;
    case 'tariffinfo':
      $node_field_machine_name = 'field_tariff_info';
      break;
    case 'breakgroundmonth':
      $node_field_machine_name = 'field_break_ground';
      break;
    case 'breakgroundday':
      $node_field_machine_name = 'field_break_ground';
      break;
    case 'breakgroundyear':
      $node_field_machine_name = 'field_break_ground';
      break;
    case 'productionstartmonth':
      $node_field_machine_name = 'field_production_start_date';
      break;
    case 'productionstartday':
      $node_field_machine_name = 'field_production_start_date';
      break;
    case 'productionstartyear':
      $node_field_machine_name = 'field_production_start_date';
      break;
    case 'sitesolarresource':
      $node_field_machine_name = 'field_site_solar_resource';
      break;
    case 'sitesolarresourcedatasource':
      $node_field_machine_name = 'field_site_solar_resource_data_s';
      break;
    case 'projecttype':
      $node_field_machine_name = 'field_project_type';
      break;
    case 'cost':
      $node_field_machine_name = 'field_cost';
      break;
    case 'costcurrency':
      $node_field_machine_name = 'field_cost_currency';
      break;
    case 'costinfosource':
      $node_field_machine_name = 'field_cost_info_source';
      break;
    case 'electricitygeneration':
      $node_field_machine_name = 'field_electricity_generation';
      break;
    case 'electricitygenerationbasis':
      $node_field_machine_name = 'field_electricity_generation_bas';
      break;
    case 'electricitygenerationexplanation':
      $node_field_machine_name = 'field_electricity_generation_exp';
      break;
    case 'contactcompany':
      $node_field_machine_name = 'field_contact_company';
      break;
    case 'contactwebsite':
      $node_field_machine_name = 'field_contact_website';
      break;
    case 'contactcompany2':
      $node_field_machine_name = 'field_contact_company_2';
      break;
    case 'contactwebsite2':
      $node_field_machine_name = 'field_contact_website_2';
      break;
    case 'contact1':
      $node_field_machine_name = 'field_contact';
      break;
    case 'contact1email':
      $node_field_machine_name = 'field_contact';
      break;
    case 'contact2':
      $node_field_machine_name = 'field_contact';
      break;
    case 'contact2email':
      $node_field_machine_name = 'field_contact';
      break;
    case 'constructionjobyears':
      $node_field_machine_name = 'field_construction_job_years';
      break;
    case 'annualoperationsjobs':
      $node_field_machine_name = 'field_annual_operations_jobs';
      break;
    case 'developer1':
      $node_field_machine_name = 'field_developer_s_';
      break;
    case 'developer2':
      $node_field_machine_name = 'field_developer_s_';
      break;
    case 'operator1':
      $node_field_machine_name = 'field_operator';
      break;
    case 'operator2':
      $node_field_machine_name = 'field_operator';
      break;
    case 'epccontractor':
      $node_field_machine_name = 'field_epc_contractor';
      break;
    case 'epccontractortask':
      $node_field_machine_name = 'field_epc_contractor';
      break;
    case 'landarea':
      $node_field_machine_name = 'field_land_area';
      break;
    case 'landareaunits':
      $node_field_machine_name = 'field_land_area_units';
      break;
    case 'drivemanufacturer1':
      $node_field_machine_name = 'field_drive_manufacturer_1';
      break;
    case 'drivemanufacturer2':
      $node_field_machine_name = 'field_drive_manufacturer_2';
      break;
    case 'heattransferfluidtype':
      $node_field_machine_name = 'field_heat_transfer_fluid_type';
      break;
    case 'heattransferfluidcompany':
      $node_field_machine_name = 'field_heat_transfer_fluid_compan';
      break;
    case 'grossturbinecapacity':
      $node_field_machine_name = 'field_gross_turbine_capacity';
      break;
    case 'netcapacity':
      $node_field_machine_name = 'field_net_capacity';
      break;
    case 'otherturbinecapacity':
      $node_field_machine_name = 'field_other_turbine_capacity';
      break;
    case 'capacityunit':
      $node_field_machine_name = 'field_capacity_unit';
      break;
    case 'turbinethermodynamiccycletype':
      $node_field_machine_name = 'field_turbine_thermodynamic_cycl';
      break;
    case 'powercyclepressure':
      $node_field_machine_name = 'field_power_cycle_pressure';
      break;
    case 'powercyclepressureunits':
      $node_field_machine_name = 'field_power_cycle_pressure_units';
      break;
    case 'turbinesupplier':
      $node_field_machine_name = 'field_turbine_supplier';
      break;
    case 'turbinesuppliercountry':
      $node_field_machine_name = 'field_turbine_supplier_country';
      break;
    case 'coolingmethod':
      $node_field_machine_name = 'field_cooling_method';
      break;
    case 'coolingmethoddescription':
      $node_field_machine_name = 'field_cooling_method_description';
      break;
    case 'turbineefficiency':
      $node_field_machine_name = 'field_turbine_efficiency';
      break;
    case 'designpointsolarelectricefficiency':
      $node_field_machine_name = 'field_design_point_solar_electri';
      break;
    case 'designpointconditions':
      $node_field_machine_name = 'field_design_point_conditions';
      break;
    case 'annualsolarelectricefficiency':
      $node_field_machine_name = 'field_annual_solar_electric_effi';
      break;
    case 'backuptype':
      $node_field_machine_name = 'field_backup_type';
      break;
    case 'backuppercent':
      $node_field_machine_name = 'field_backup_percent';
      break;
    case 'storagetype':
      $node_field_machine_name = 'field_storage_type';
      break;
    case 'storagecapacity':
      $node_field_machine_name = 'field_storage_capacity';
      break;
    case 'storagecapacityunit':
      $node_field_machine_name = 'field_storage_capacity_unit';
      break;
    case 'storagedescription':
      $node_field_machine_name = 'field_storage_description';
      break;
    case 'longdescription':
      $node_field_machine_name = 'field_long_description';
      break;
    case 'photo':
      $node_field_machine_name = 'field_photo';
      break;
    case 'alttext':
      $node_field_machine_name = 'field_photo';
      break;
    case 'caption':
      $node_field_machine_name = 'field_caption';
      break;
    case 'credit':
      $node_field_machine_name = '';
      break;
    case 'publishstatus':
      $node_field_machine_name = 'moderation_state';
      break;
    case 'draftid':
      $node_field_machine_name = '';
      break;
    case 'deleted':
      $node_field_machine_name = '';
      break;
    case 'numberscas':
      $node_field_machine_name = 'field_number_of_scas_per_loop';
      break;
    case 'numberloops':
      $node_field_machine_name = 'field_number_of_loops';
      break;
    case 'solarfieldaperture':
      $node_field_machine_name = 'field_solar_field_aperture_area';
      break;
    case 'solarfieldapertureunits':
      $node_field_machine_name = 'field_solar_field_aperture_area_';
      break;
    case 'scaarea':
      $node_field_machine_name = 'field_sca_area';
      break;
    case 'scaareaunits':
      $node_field_machine_name = 'field_sca_area_units';
      break;
    case 'scamanufacturer1':
      $node_field_machine_name = 'field_sca_manufacturer_1';
      break;
    case 'scamanufacturer2':
      $node_field_machine_name = 'field_sca_manufacturer_2';
      break;
    case 'scamodel1':
      $node_field_machine_name = 'field_sca_model_1';
      break;
    case 'scamodel2':
      $node_field_machine_name = 'field_sca_model_2';
      break;
    case 'scadescription1':
      $node_field_machine_name = 'field_sca_description_1';
      break;
    case 'scadescription2':
      $node_field_machine_name = 'field_sca_description_2';
      break;
    case 'scamirrormanufacturer1':
      $node_field_machine_name = 'field_sca_mirror_manufacturer_1';
      break;
    case 'scamirrormanufacturer2':
      $node_field_machine_name = 'field_sca_mirror_manufacturer_2';
      break;
    case 'scamirrormodel1':
      $node_field_machine_name = 'field_sca_mirror_model_1';
      break;
    case 'scamirrormodel2':
      $node_field_machine_name = 'field_sca_mirror_model_2';
      break;
    case 'scalength':
      $node_field_machine_name = 'field_sca_length';
      break;
    case 'scalengthunits':
      $node_field_machine_name = 'field_sca_length_units';
      break;
    case 'numbermodulespersca':
      $node_field_machine_name = 'field_number_of_modules_per_sca';
      break;
    case 'numberscasperloop':
      $node_field_machine_name = 'field_number_of_scas_per_loop';
      break;
    case 'totalloops':
      $node_field_machine_name = 'field_total_loops';
      break;
    case 'solarfieldinlettemperature':
      $node_field_machine_name = 'field_solar_field_inlet_temperat';
      break;
    case 'solarfieldoutlettemperature':
      $node_field_machine_name = 'field_solar_field_outlet_tempera';
      break;
    case 'solarfieldtemperatureunits':
      $node_field_machine_name = 'field_solar_field_temperature_un';
      break;
    case 'solarfieldtemperaturedifference':
      $node_field_machine_name = 'field_solar_field_temperature_di';
      break;
    case 'generationofftaker':
      $node_field_machine_name = 'field_generation_offtaker_s_';
      break;
    case 'hcemanufacturer':
      $node_field_machine_name = 'field_hces';
      break;
    case 'referencedoc':
      $node_field_machine_name = 'field_reference_doc';
      break;
    case 'type':
      $node_field_machine_name = 'field_reference_doc';
      break;
    case 'dishaperturearea':
      $node_field_machine_name = 'field_dish_aperture_area';
      break;
    case 'dishapertureareaunits':
      $node_field_machine_name = 'field_dish_aperture_area_units';
      break;
    case 'linelength':
      $node_field_machine_name = 'field_line_length';
      break;
    case 'linelengthunits':
      $node_field_machine_name = 'field_line_length_units';
      break;
    case 'widthmirrorsinline':
      $node_field_machine_name = 'field_mirror_width';
      break;
    case 'widthmirrorsunits':
      $node_field_machine_name = 'field_mirror_width_units';
      break;
    case 'collectormanufacturer1':
      $node_field_machine_name = 'field_collector_manufacturer_1';
      break;
    case 'collectormodel1':
      $node_field_machine_name = 'field_collector_model_1';
      break;
    case 'collectormanufacturer2':
      $node_field_machine_name = 'field_collector_manufacturer_2';
      break;
    case 'collectormodel2':
      $node_field_machine_name = 'field_collector_model_2';
      break;
    case 'collectordescription1':
      $node_field_machine_name = 'field_collector_description_1';
      break;
    case 'collectordescription2':
      $node_field_machine_name = 'field_collector_description_2';
      break;
    case 'lfrmirrormanufacturer1':
      $node_field_machine_name = 'field_lfr_mirror_manufacturer_1';
      break;
    case 'lfrreceivermanufacturer1':
    case 'receivermanufacturer1':
      $node_field_machine_name = 'field_receiver_manufacturer_1';
      break;
    case 'lfrreceivermanufacturer2':
    case 'receivermanufacturer2':
      $node_field_machine_name = 'field_receiver_manufacturer_2';
      break;
    case 'numbermirrorsacrossline':
      $node_field_machine_name = 'field_number_of_mirrors_across_l';
      break;
    case 'lfrreceivertype1':
      $node_field_machine_name = 'field_lfr_receiver_type_1';
      break;

    default:
      $node_field_machine_name = '';
  }
  return $node_field_machine_name;

}

/*
 * This function creates the labels that we want in our csv import and export files.
 * Certain fields are parargraphs and certain fields have multiple values and certain fields have multiple individual fields.
 * This function creates the csv headers in a human usable format and is used to process the import of the default csv file as well.
 */
function nrel_sp_project_csv_labels() {
  //GET FIELD LABELS
  $labels = get_node_fields('project', 'label');
  array_unshift($labels, 'Title');

  foreach ($labels AS $index => $label) {
    $new_fields = [];
    switch ($label) {
      case 'Address':
        $new_fields[] = 'Address (City)';
        $new_fields[] = 'Address (State)';
        $new_fields[] = 'Address (Region)';
        $new_fields[] = 'Address (Country)';
        $new_fields[] = 'Address (County)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Lat/Long Location':
        $new_fields[] = 'Lat/Lon (Latitude Degrees)';
        $new_fields[] = 'Lat/Lon (Latitude Minutes)';
        $new_fields[] = 'Lat/Lon (Latitude Seconds)';
        $new_fields[] = 'Lat/Lon (Latitude Direction)';
        $new_fields[] = 'Lat/Lon (Longitude Degrees)';
        $new_fields[] = 'Lat/Lon (Longitude Minutes)';
        $new_fields[] = 'Lat/Lon (Longitude Seconds)';
        $new_fields[] = 'Lat/Lon (Longitude Direction)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'HCEs':
        $new_fields[] = 'HCEs 1 (Manufacturer)';
        $new_fields[] = 'HCEs 1 (Model)';
        $new_fields[] = 'HCEs 1 (Number of HCEs)';
        $new_fields[] = 'HCEs 1 (HCE Type)';
        $new_fields[] = 'HCEs 1 (HCE Length)';
        $new_fields[] = 'HCEs 1 (HCE Length Tube Units)';
        $new_fields[] = 'HCEs 2 (Manufacturer)';
        $new_fields[] = 'HCEs 2 (Model)';
        $new_fields[] = 'HCEs 2 (Number of HCEs)';
        $new_fields[] = 'HCEs 2 (HCE Type)';
        $new_fields[] = 'HCEs 2 (HCE Length)';
        $new_fields[] = 'HCEs 2 (HCE Length Tube Units)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Owner(s)':
        $new_fields[] = 'Owner 1 (Owner)';
        $new_fields[] = 'Owner 1 (Owner Percent)';
        $new_fields[] = 'Owner 2 (Owner)';
        $new_fields[] = 'Owner 2 (Owner Percent)';
        $new_fields[] = 'Owner 3 (Owner)';
        $new_fields[] = 'Owner 3 (Owner Percent)';
        $new_fields[] = 'Owner 4 (Owner)';
        $new_fields[] = 'Owner 4 (Owner Percent)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Contact(s)':
        $new_fields[] = 'Contact 1 (Email)';
        $new_fields[] = 'Contact 1 (Contact Name)';
        $new_fields[] = 'Contact 1 (Company Name)';
        $new_fields[] = 'Contact 1 (Company Website)';
        $new_fields[] = 'Contact 2 (Email)';
        $new_fields[] = 'Contact 2 (Contact Name)';
        $new_fields[] = 'Contact 2 (Company Name)';
        $new_fields[] = 'Contact 2 (Company Website)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Developer(s)':
        $new_fields[] = 'Developer 1';
        $new_fields[] = 'Developer 2';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Operator(s)':
        $new_fields[] = 'Operator 1';
        $new_fields[] = 'Operator 2';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Photo':
        $new_fields[] = 'Photo (URL)';
        $new_fields[] = 'Photo (Alt Text)';
        $new_fields[] = 'Photo (Caption)';
        $new_fields[] = 'Photo (Credit)';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Key References':
        $new_fields[] = 'Key Reference (URL)';
        $new_fields[] = 'Key Reference Type';
        array_splice( $labels, $index, 0, $new_fields );
        break;
      case 'Generation Offtaker(s)':
        $new_fields[] = 'Generation Offtaker 1';
        $new_fields[] = 'Generation Offtaker 2';
        array_splice( $labels, $index, 0, $new_fields );
        break;
    }
  }
  foreach ($labels AS $index => $label) {
    switch ($label) {
      case 'Address':
      case 'Lat/Long Location':
      case 'HCEs':
      case 'Owner(s)':
      case 'Contact(s)':
      case 'Developer(s)':
      case 'Operator(s)':
      case 'Photo':
      case 'Key References':
      case 'Generation Offtaker(s)':
        unset($labels[$index]);
        break;
    }
  }
  $final_labels = [];
  foreach ($labels AS $label) {
    $final_labels[] = $label;
  }
  return $final_labels;
}

function nrel_sp_get_field_label_mapping() {
  $field_label_mapping = [];
  // Load all of the project fields
  $entityManager = \Drupal::service('entity_field.manager');
  $fields = $entityManager->getFieldDefinitions('node', 'project');
  $field_label_mapping = [];
  $excluded_keys = [
    'panelizer',
  ];
  // Loop through all of the fields to get a mapping of fields to labels
  foreach ($fields as $key => $field) {
    $field_info = $field->getFieldStorageDefinition();
    if ($field_info->isBaseField() == FALSE && !in_array($key, $excluded_keys)) {
      $field_info = $field->getFieldStorageDefinition();
      $field_label_mapping[$field->label()] = $key;
    }
  }
  return $field_label_mapping;
}

/*
 * This function creates the project import template file.
 */
function nrel_sp_project_create_project_csv_template() {
  // Open a filestream to a file in the public folder
  $fh_disk = fopen('public://project-import-template.csv', 'w');

  // Add the header row
  $labels = nrel_sp_project_csv_labels();
  fputcsv($fh_disk, $labels);
  fclose($fh_disk);
}

/*
 * This function creates the project export file.
 */
function nrel_sp_project_update_project_csv_export_file() {
  // Open a filestream to a file in the public folder
  $fh_disk = fopen('public://project-export.csv', 'w');

  // Add the header row
  $labels = nrel_sp_project_csv_labels();
  fputcsv($fh_disk, $labels);

  // Get the project field/label mapping array
  $field_label_mapping = nrel_sp_get_field_label_mapping();

  // Load all published projects
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'project')
    ->condition('status', 1);
  $nids = $query->execute();
  $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
  foreach ($nodes AS $node) {
    // In this loop we insert the individual columns in the csv for various paragraphs and multi-value fields
    $row = [];
    $address = $node->get('field_address')->getValue();
    $countries = \Drupal\Core\Locale\CountryManager::getStandardList();
    $country = $countries[$address[0]['country_code']];
    $contacts = $node->get('field_contact')->referencedEntities();
    $developers = $node->get('field_developer_s_')->getValue();
    $generation_offtakers = $node->get('field_generation_offtaker_s_')
      ->getValue();
    $operators = $node->get('field_operator')->getValue();
    $hce_paragraphs = $node->get('field_hces')->referencedEntities();
    $photo = $node->get('field_photo')->getValue();
    $reference_doc = $node->get('field_reference_doc')->referencedEntities();
    $lat_lon = $node->get('field_lat_long_location')->referencedEntities();
    $owners = $node->get('field_owners')->referencedEntities();
    foreach ($labels AS $label) {
      switch ($label) {
        case 'Title':
          $row[] = $node->getTitle();
          break;
        case 'Technology':
        case 'Status':
          $value = $node->get($field_label_mapping[$label])->getValue();
          if ($term = \Drupal\taxonomy\Entity\Term::load($value[0]['target_id'])) {
            $row[] = $term->getName();
          }
          else {
            $row[] = '';
          }
          break;
        case 'Address (City)':
          $row[] = (isset($address[0]['locality']) ? $address[0]['locality'] : '');
          break;
        case 'Address (State)':
          $row[] = (isset($address[0]['administrative_area']) ? $address[0]['administrative_area'] : '');
          break;
        case 'Address (Region)':
          $row[] = ''; // $address[0]['region'];
          break;
        case 'Address (Country)':
          $row[] = (isset($address[0]['country']) ? $address[0]['country'] : '');
          break;
        case 'Address (County)':
          $row[] = ''; // $address[0]['locality'];
          break;
        case 'Lat/Lon (Latitude Degrees)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_latitude_degrees->value : '');
          break;
        case 'Lat/Lon (Latitude Minutes)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_latitude_minutes->value : '');
          break;
        case 'Lat/Lon (Latitude Seconds)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_latitude_seconds->value : '');
          break;
        case 'Lat/Lon (Latitude Direction)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_latitude_direction->value : '');
          break;
        case 'Lat/Lon (Longitude Degrees)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_longitude_degrees->value : '');
          break;
        case 'Lat/Lon (Longitude Minutes)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_longitude_minutes->value : '');
          break;
        case 'Lat/Lon (Longitude Seconds)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_longitude_seconds->value : '');
          break;
        case 'Lat/Lon (Longitude Direction)':
          $row[] = (is_object($lat_lon) ? $lat_lon->field_longitude_direction->value : '');
          break;
        case 'HCEs 1 (Manufacturer)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_manufacturer->value : '');
          break;
        case 'HCEs 1 (Model)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_model->value : '');
          break;
        case 'HCEs 1 (Number of HCEs)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_number_of_hces->value : '');
          break;
        case 'HCEs 1 (HCE Type)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_hce_type->value : '');
          break;
        case 'HCEs 1 (HCE Length)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_hce_length->value : '');
          break;
        case 'HCEs 1 (HCE Length Tube Units)':
          $row[] = (isset($hce_paragraphs[0]) ? $hce_paragraphs[0]->field_hce_length_tube_units->value : '');
          break;
        case 'HCEs 2 (Manufacturer)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_manufacturer->value : '');
          break;
        case 'HCEs 2 (Model)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_model->value : '');
          break;
        case 'HCEs 2 (Number of HCEs)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_number_of_hces->value : '');
          break;
        case 'HCEs 2 (HCE Type)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_hce_type->value : '');
          break;
        case 'HCEs 2 (HCE Length)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_hce_length->value : '');
          break;
        case 'HCEs 2 (HCE Length Tube Units)':
          $row[] = (isset($hce_paragraphs[1]) ? $hce_paragraphs[1]->field_hce_length_tube_units->value : '');
          break;
        case 'Owner 1 (Owner)':
          $row[] = (isset($owners[0]->field_owner) ? $owners[0]->field_owner->value : '');
          break;
        case 'Owner 1 (Owner Percent)':
          $row[] = (isset($owners[0]->field_owner_percent) ? $owners[0]->field_owner_percent->value : '');
          break;
        case 'Owner 2 (Owner)':
          $row[] = (isset($owners[1]->field_owner) ? $owners[1]->field_owner->value : '');
          break;
        case 'Owner 2 (Owner Percent)':
          $row[] = (isset($owners[1]->field_owner_percent) ? $owners[1]->field_owner_percent->value : '');
          break;
        case 'Owner 3 (Owner)':
          $row[] = (isset($owners[2]->field_owner) ? $owners[2]->field_owner->value : '');
          break;
        case 'Owner 3 (Owner Percent)':
          $row[] = (isset($owners[2]->field_owner_percent) ? $owners[2]->field_owner_percent->value : '');
          break;
        case 'Owner 4 (Owner)':
          $row[] = (isset($owners[3]->field_owner) ? $owners[3]->field_owner->value : '');
          break;
        case 'Owner 4 (Owner Percent)':
          $row[] = (isset($owners[3]->field_owner_percent) ? $owners[3]->field_owner_percent->value : '');
          break;
        case 'Contact 1 (Email)':
          $row[] = (isset($contacts[0]->field_email_address) ? $contacts[0]->field_email_address->value : '');
          break;
        case 'Contact 1 (Contact Name)':
          $row[] = (isset($contacts[0]->field_contact_name) ? $contacts[0]->field_contact_name->value : '');
          break;
        case 'Contact 1 (Company Name)':
          $row[] = (isset($contacts[0]->field_company) ? $contacts[0]->field_company->value : '');
          break;
        case 'Contact 1 (Company Website)':
          $row[] = (isset($contacts[0]->field_contact_website) ? $contacts[0]->field_contact_website->value : '');
          break;
        case 'Contact 2 (Email)':
          $row[] = (isset($contacts[1]->field_email_address) ? $contacts[1]->field_email_address->value : '');
          break;
        case 'Contact 2 (Contact Name)':
          $row[] = (isset($contacts[1]->field_contact_name) ? $contacts[1]->field_contact_name->value : '');
          break;
        case 'Contact 2 (Company Name)':
          $row[] = (isset($contacts[0]->field_company) ? $contacts[0]->field_company->value : '');
          break;
        case 'Contact 2 (Company Website)':
          $row[] = (isset($contacts[0]->field_contact_website) ? $contacts[0]->field_contact_website->value : '');
          break;
        case 'Developer 1':
          $row[] = (isset($developers[0]['value']) ? $developers[0]['value'] : '');
          break;
        case 'Developer 2':
          $row[] = (isset($developers[1]['value']) ? $developers[1]['value'] : '');
          break;
        case 'Operator 1':
          $row[] = (isset($operators[0]['value']) ? $operators[0]['value'] : '');
          break;
        case 'Operator 2':
          $row[] = (isset($operators[1]['value']) ? $operators[1]['value'] : '');
          break;
        case 'Photo (URL)';
          if (isset($photo[0]['target_id']) && $photo_file = \Drupal\file\Entity\File::load($photo[0]['target_id'])) {
            $row[] = file_create_url($photo_file->getFileUri());
          }
          else {
            $row[] = '';
          }
          break;
        case 'Photo (Alt Text)';
          $row[] = (isset($photo[0]['alt']) ? $photo[0]['alt'] : '');
          break;
        case 'Photo (Caption)';
          $value = $node->get($field_label_mapping['Caption'])->getValue();
          if (isset($value[0]['value'])) {
            $row[] = $value[0]['value'];
            //$row[] = str_replace("m²", "m2", $value[0]['value']);
          }
          else {
            $row[] = '';
          }
          break;
        case 'Photo (Credit)';
          $row[] = '';
          break;
        case 'Key Reference (URL)':
          $row[] = (isset($reference_doc[0]->field_key_reference_url) ? $reference_doc[0]->field_key_reference_url->value : '');
          break;
        case 'Key Reference Type':
          $row[] = (isset($reference_doc[0]->field_key_reference_type) ? $reference_doc[0]->field_key_reference_type->value : '');
          break;
        case 'Generation Offtaker 1':
          $row[] = (isset($generation_offtakers[0]['value']) ? $generation_offtakers[0]['value'] : '');
          break;
        case 'Generation Offtaker 2':
          $row[] = (isset($generation_offtakers[1]['value']) ? $generation_offtakers[1]['value'] : '');
          break;
        case 'SCA Area Units':
        case 'Solar-Field Aperture Area Units':
        case 'Dish Aperture Area Units':
        case 'Heliostat Field Area Units':
        case 'Heliostat Area Units':
          $value = $node->get($field_label_mapping[$label])->getValue();
          if (isset($value[0]['value'])) {
            $row[] = $value[0]['value'];
            //$row[] = str_replace("m²", "m2", $value[0]['value']);
          }
          else {
            $row[] = '';
          }
          break;
        default:
          $value = $node->get($field_label_mapping[$label])->getValue();
          if (isset($value[0]['value'])) {
            $row[] = $value[0]['value'];
          }
          else {
            $row[] = '';
          }
      }
    }
    fputcsv($fh_disk, $row);
  }
  fclose($fh_disk);
}

/*
 * Implementation of hook_node_update.
 * Anytime that a project is updated we need to rebuild the project download csv.
 */
function nrel_sp_project_node_update($node) {
  if ($node->getType() == 'project') {
    nrel_sp_project_update_project_csv_export_file();
  }
}
